{
    "contents" : "##############################################################################\n##Function: ggarrange <- function(piclist,matrixmap,\n##            widrow = rep(1/nrow(matrixmap),nrow(matrixmap)),\n##            widcol = rep(1/ncol(matrixmap),ncol(matrixmap)))\n##This Function is used to arrange the ggplot object plotting\n##piclist is a list which contents all the ggplot objects you want to plot.\n##matrixmap is an array uesd to arrange the plotting sub field. \n##widrow is a vector to control the width of every row(s).\n##widcol is a vector to control the width of every column(s).\n##   e.g. If you want to draw 3 pctures in 2 * 2 subregions like following,\n##                |      (Picture 1)      |\n##                |(Picture 2) (Picture 3)|\n##           you should first set the matrixmap as\n##                     [1, 1;\n##                      2, 3],\n##           that is to say matrixmap = matrix(c(1, 2, 1, 3),nrow = 2)\n##        If you want (the width of 1st row) : (the width of 2rd row) = 1: 2\n##           you should set widrow = c(1/3, 2/3).\n##        Finally, result is ggarrange(YOURPLOTTINGLIST, \n##                                        matrix(c(1,1,2,3),nrow=2,\n##                                        c(1/3, 2/3))\n##        \n##It is similar to the fuction par.\n##Enjoy Your Times!!!\n##Email: huangbaochenwop@yeah.net\n##Tony Huang\n\n\nggarrange <- function(piclist,matrixmap,\n                         widrow = rep(1/nrow(matrixmap),nrow(matrixmap)),\n                         widcol = rep(1/ncol(matrixmap),ncol(matrixmap))){\n  \n  len.list = length(piclist)\n  \n  \n  #########################################################################\n  ## Errors dealing! ######################################################\n  \n  if (!(is.list(piclist))) {\n    stop(\"Pictures List doesn't exist!\") ##picture list error.\n  }\n  \n  for (i in (1:len.list)){\n    if (!is.ggplot(piclist[[i]])){\n      stop(\"There exists at least one Object which is not a ggplot object!\") ##picture objects error\n    }\n  }\n  \n  if (!is.matrix(matrixmap)){\n    stop(\"Matrix map dosen't exist!\") ##matrix error\n  }\n  \n  if ((length(widrow) != nrow(matrixmap)) | (length(widcol) != ncol(matrixmap))) {\n    stop(\"Length of rowlen or coolen is different from dimmension of matrixmap!\") ##dimmension error\n  }\n  \n  if ((sum(widrow) != 1) | (sum(widcol) != 1)){\n    stop(\"Row/column width proportion error!\") ##Row/column proportion error\n  }\n  \n  \n  ############################################################################\n  ##Plotting!#################################################################\n  \n  ##New page\n  grid.newpage()\n  pushViewport(viewport(layout=grid.layout(nrow(matrixmap),\n                                           ncol(matrixmap),\n                                           widths = unit(widcol,\"npc\"),\n                                           heights = unit(widrow,\"npc\")\n                                           )))\n  \n  \n  ##Plot pictures one by one.\n  for (i in (1:length(piclist))){\n    \n    minfun <- function(vec){\n      options(warn = -1)\n      a = min(which(vec == i))\n      options(warn = 1)\n      a\n    }\n    \n    maxfun <- function(vec){\n      options(warn = -1)\n      a = max(which(vec == i))\n      options(warn = 1)\n      a\n    }\n    \n    minvec <- function(mat, n){\n      a = apply(mat, n, minfun)\n      a = unlist(a)\n      a = a[a!= -Inf]\n      resu = min(a)\n      resu\n    }\n    \n    maxvec <- function(mat, n){\n      a = apply(mat, n, maxfun)\n      a = unlist(a)\n      a = a[a!= -Inf]\n      resu = max(a)\n      resu\n    }\n    \n    \n    minrow = minvec(matrixmap, 2)\n    maxrow = maxvec(matrixmap, 2)\n    mincol = minvec(matrixmap, 1)\n    maxcol = maxvec(matrixmap, 1)\n    \n    \n    print(piclist[[i]],\n          vp = viewport(layout.pos.row = minrow:maxrow,\n                        layout.pos.col = mincol:maxcol))\n  }\n  \n}\n\n\n  \n\n\n\n",
    "created" : 1410346488029.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2608558583",
    "id" : "ECC7671D",
    "lastKnownWriteTime" : 1407519669,
    "path" : "D:/RPackages/ggplotExtra/R/ggarrange.R",
    "project_path" : "R/ggarrange.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}